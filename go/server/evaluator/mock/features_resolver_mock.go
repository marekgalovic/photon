// Code generated by MockGen. DO NOT EDIT.
// Source: evaluator/features_resolver.go

// Package mock_evaluator is a generated GoMock package.
package mock_evaluator

import (
	repositories "github.com/marekgalovic/photon/go/core/repositories"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFeaturesResolver is a mock of FeaturesResolver interface
type MockFeaturesResolver struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesResolverMockRecorder
}

// MockFeaturesResolverMockRecorder is the mock recorder for MockFeaturesResolver
type MockFeaturesResolverMockRecorder struct {
	mock *MockFeaturesResolver
}

// NewMockFeaturesResolver creates a new mock instance
func NewMockFeaturesResolver(ctrl *gomock.Controller) *MockFeaturesResolver {
	mock := &MockFeaturesResolver{ctrl: ctrl}
	mock.recorder = &MockFeaturesResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeaturesResolver) EXPECT() *MockFeaturesResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockFeaturesResolver) Resolve(arg0 *repositories.Model, arg1 map[string]interface{}) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockFeaturesResolverMockRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockFeaturesResolver)(nil).Resolve), arg0, arg1)
}
