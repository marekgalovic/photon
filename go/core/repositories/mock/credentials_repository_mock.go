// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/credentials_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	. "github.com/marekgalovic/photon/go/core/repositories"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCredentialsRepository is a mock of CredentialsRepository interface
type MockCredentialsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsRepositoryMockRecorder
}

// MockCredentialsRepositoryMockRecorder is the mock recorder for MockCredentialsRepository
type MockCredentialsRepositoryMockRecorder struct {
	mock *MockCredentialsRepository
}

// NewMockCredentialsRepository creates a new mock instance
func NewMockCredentialsRepository(ctrl *gomock.Controller) *MockCredentialsRepository {
	mock := &MockCredentialsRepository{ctrl: ctrl}
	mock.recorder = &MockCredentialsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCredentialsRepository) EXPECT() *MockCredentialsRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockCredentialsRepository) List() ([]*Credential, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCredentialsRepositoryMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCredentialsRepository)(nil).List))
}

// Find mocks base method
func (m *MockCredentialsRepository) Find(arg0 string) (*Credential, error) {
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockCredentialsRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCredentialsRepository)(nil).Find), arg0)
}

// Create mocks base method
func (m *MockCredentialsRepository) Create(arg0 *Credential) (string, string, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create
func (mr *MockCredentialsRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCredentialsRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockCredentialsRepository) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCredentialsRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCredentialsRepository)(nil).Delete), arg0)
}
