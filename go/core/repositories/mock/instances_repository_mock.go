// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/instances_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	. "github.com/marekgalovic/photon/go/core/repositories"
	gomock "github.com/golang/mock/gomock"
	zk "github.com/samuel/go-zookeeper/zk"
	reflect "reflect"
)

// MockInstancesRepository is a mock of InstancesRepository interface
type MockInstancesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesRepositoryMockRecorder
}

// MockInstancesRepositoryMockRecorder is the mock recorder for MockInstancesRepository
type MockInstancesRepositoryMockRecorder struct {
	mock *MockInstancesRepository
}

// NewMockInstancesRepository creates a new mock instance
func NewMockInstancesRepository(ctrl *gomock.Controller) *MockInstancesRepository {
	mock := &MockInstancesRepository{ctrl: ctrl}
	mock.recorder = &MockInstancesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstancesRepository) EXPECT() *MockInstancesRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockInstancesRepository) List(arg0 string) (map[string]*Instance, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(map[string]*Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockInstancesRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstancesRepository)(nil).List), arg0)
}

// Register mocks base method
func (m *MockInstancesRepository) Register(arg0 string, arg1 *Instance) (string, error) {
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockInstancesRepositoryMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockInstancesRepository)(nil).Register), arg0, arg1)
}

// Unregister mocks base method
func (m *MockInstancesRepository) Unregister(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Unregister", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister
func (mr *MockInstancesRepositoryMockRecorder) Unregister(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockInstancesRepository)(nil).Unregister), arg0, arg1)
}

// Watch mocks base method
func (m *MockInstancesRepository) Watch(arg0 string) (<-chan zk.Event, error) {
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(<-chan zk.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockInstancesRepositoryMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockInstancesRepository)(nil).Watch), arg0)
}

// Exists mocks base method
func (m *MockInstancesRepository) Exists(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockInstancesRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockInstancesRepository)(nil).Exists), arg0)
}
