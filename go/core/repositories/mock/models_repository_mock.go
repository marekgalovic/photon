// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/models_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	. "github.com/marekgalovic/photon/go/core/repositories"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModelsRepository is a mock of ModelsRepository interface
type MockModelsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockModelsRepositoryMockRecorder
}

// MockModelsRepositoryMockRecorder is the mock recorder for MockModelsRepository
type MockModelsRepositoryMockRecorder struct {
	mock *MockModelsRepository
}

// NewMockModelsRepository creates a new mock instance
func NewMockModelsRepository(ctrl *gomock.Controller) *MockModelsRepository {
	mock := &MockModelsRepository{ctrl: ctrl}
	mock.recorder = &MockModelsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelsRepository) EXPECT() *MockModelsRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockModelsRepository) List() ([]*Model, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockModelsRepositoryMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockModelsRepository)(nil).List))
}

// Find mocks base method
func (m *MockModelsRepository) Find(arg0 int64) (*Model, error) {
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockModelsRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockModelsRepository)(nil).Find), arg0)
}

// FindByName mocks base method
func (m *MockModelsRepository) FindByName(arg0 string) (*Model, error) {
	ret := m.ctrl.Call(m, "FindByName", arg0)
	ret0, _ := ret[0].(*Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockModelsRepositoryMockRecorder) FindByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockModelsRepository)(nil).FindByName), arg0)
}

// Create mocks base method
func (m *MockModelsRepository) Create(arg0 *Model) (int64, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockModelsRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModelsRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockModelsRepository) Delete(arg0 int64) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockModelsRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModelsRepository)(nil).Delete), arg0)
}

// ListVersions mocks base method
func (m *MockModelsRepository) ListVersions(arg0 int64) ([]*ModelVersion, error) {
	ret := m.ctrl.Call(m, "ListVersions", arg0)
	ret0, _ := ret[0].([]*ModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions
func (mr *MockModelsRepositoryMockRecorder) ListVersions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockModelsRepository)(nil).ListVersions), arg0)
}

// FindVersion mocks base method
func (m *MockModelsRepository) FindVersion(arg0 int64) (*ModelVersion, error) {
	ret := m.ctrl.Call(m, "FindVersion", arg0)
	ret0, _ := ret[0].(*ModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVersion indicates an expected call of FindVersion
func (mr *MockModelsRepositoryMockRecorder) FindVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVersion", reflect.TypeOf((*MockModelsRepository)(nil).FindVersion), arg0)
}

// PrimaryVersion mocks base method
func (m *MockModelsRepository) PrimaryVersion(arg0 int64) (*ModelVersion, error) {
	ret := m.ctrl.Call(m, "PrimaryVersion", arg0)
	ret0, _ := ret[0].(*ModelVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrimaryVersion indicates an expected call of PrimaryVersion
func (mr *MockModelsRepositoryMockRecorder) PrimaryVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryVersion", reflect.TypeOf((*MockModelsRepository)(nil).PrimaryVersion), arg0)
}

// CreateVersion mocks base method
func (m *MockModelsRepository) CreateVersion(arg0 *ModelVersion) (int64, error) {
	ret := m.ctrl.Call(m, "CreateVersion", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVersion indicates an expected call of CreateVersion
func (mr *MockModelsRepositoryMockRecorder) CreateVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockModelsRepository)(nil).CreateVersion), arg0)
}

// DeleteVersion mocks base method
func (m *MockModelsRepository) DeleteVersion(arg0 int64) error {
	ret := m.ctrl.Call(m, "DeleteVersion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersion indicates an expected call of DeleteVersion
func (mr *MockModelsRepositoryMockRecorder) DeleteVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersion", reflect.TypeOf((*MockModelsRepository)(nil).DeleteVersion), arg0)
}

// SetPrimaryVersion mocks base method
func (m *MockModelsRepository) SetPrimaryVersion(arg0, arg1 int64) error {
	ret := m.ctrl.Call(m, "SetPrimaryVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrimaryVersion indicates an expected call of SetPrimaryVersion
func (mr *MockModelsRepositoryMockRecorder) SetPrimaryVersion(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrimaryVersion", reflect.TypeOf((*MockModelsRepository)(nil).SetPrimaryVersion), arg0, arg1)
}
