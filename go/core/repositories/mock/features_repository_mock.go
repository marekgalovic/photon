// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/features_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	. "github.com/marekgalovic/photon/go/core/repositories"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFeaturesRepository is a mock of FeaturesRepository interface
type MockFeaturesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesRepositoryMockRecorder
}

// MockFeaturesRepositoryMockRecorder is the mock recorder for MockFeaturesRepository
type MockFeaturesRepositoryMockRecorder struct {
	mock *MockFeaturesRepository
}

// NewMockFeaturesRepository creates a new mock instance
func NewMockFeaturesRepository(ctrl *gomock.Controller) *MockFeaturesRepository {
	mock := &MockFeaturesRepository{ctrl: ctrl}
	mock.recorder = &MockFeaturesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeaturesRepository) EXPECT() *MockFeaturesRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockFeaturesRepository) List() ([]*FeatureSet, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*FeatureSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFeaturesRepositoryMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFeaturesRepository)(nil).List))
}

// Find mocks base method
func (m *MockFeaturesRepository) Find(arg0 int64) (*FeatureSet, error) {
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*FeatureSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockFeaturesRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFeaturesRepository)(nil).Find), arg0)
}

// Create mocks base method
func (m *MockFeaturesRepository) Create(arg0 *FeatureSet) (int64, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFeaturesRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeaturesRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockFeaturesRepository) Delete(arg0 int64) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFeaturesRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeaturesRepository)(nil).Delete), arg0)
}
