// Code generated by MockGen. DO NOT EDIT.
// Source: storage/files/files_store.go

// Package mock_files is a generated GoMock package.
package mock_files

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockFilesStore is a mock of FilesStore interface
type MockFilesStore struct {
	ctrl     *gomock.Controller
	recorder *MockFilesStoreMockRecorder
}

// MockFilesStoreMockRecorder is the mock recorder for MockFilesStore
type MockFilesStoreMockRecorder struct {
	mock *MockFilesStore
}

// NewMockFilesStore creates a new mock instance
func NewMockFilesStore(ctrl *gomock.Controller) *MockFilesStore {
	mock := &MockFilesStore{ctrl: ctrl}
	mock.recorder = &MockFilesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilesStore) EXPECT() *MockFilesStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockFilesStore) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFilesStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFilesStore)(nil).Close))
}

// Reader mocks base method
func (m *MockFilesStore) Reader(arg0 string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Reader", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader
func (mr *MockFilesStoreMockRecorder) Reader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockFilesStore)(nil).Reader), arg0)
}

// Writer mocks base method
func (m *MockFilesStore) Writer(arg0 string) (io.WriteCloser, error) {
	ret := m.ctrl.Call(m, "Writer", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer
func (mr *MockFilesStoreMockRecorder) Writer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockFilesStore)(nil).Writer), arg0)
}

// Delete mocks base method
func (m *MockFilesStore) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFilesStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFilesStore)(nil).Delete), arg0)
}

// ReadBytes mocks base method
func (m *MockFilesStore) ReadBytes(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "ReadBytes", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBytes indicates an expected call of ReadBytes
func (mr *MockFilesStoreMockRecorder) ReadBytes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBytes", reflect.TypeOf((*MockFilesStore)(nil).ReadBytes), arg0)
}

// WriteBytes mocks base method
func (m *MockFilesStore) WriteBytes(arg0 string, arg1 []byte) error {
	ret := m.ctrl.Call(m, "WriteBytes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBytes indicates an expected call of WriteBytes
func (mr *MockFilesStoreMockRecorder) WriteBytes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBytes", reflect.TypeOf((*MockFilesStore)(nil).WriteBytes), arg0, arg1)
}
