// Code generated by MockGen. DO NOT EDIT.
// Source: storage/features/features_store.go

// Package mock_features is a generated GoMock package.
package mock_features

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFeaturesStore is a mock of FeaturesStore interface
type MockFeaturesStore struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesStoreMockRecorder
}

// MockFeaturesStoreMockRecorder is the mock recorder for MockFeaturesStore
type MockFeaturesStoreMockRecorder struct {
	mock *MockFeaturesStore
}

// NewMockFeaturesStore creates a new mock instance
func NewMockFeaturesStore(ctrl *gomock.Controller) *MockFeaturesStore {
	mock := &MockFeaturesStore{ctrl: ctrl}
	mock.recorder = &MockFeaturesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeaturesStore) EXPECT() *MockFeaturesStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockFeaturesStore) Get(arg0 int64, arg1 []string, arg2 map[string]interface{}) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFeaturesStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFeaturesStore)(nil).Get), arg0, arg1, arg2)
}

// Insert mocks base method
func (m *MockFeaturesStore) Insert(arg0 int64, arg1 []string, arg2 map[string]interface{}) error {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockFeaturesStoreMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFeaturesStore)(nil).Insert), arg0, arg1, arg2)
}

// CreateFeatureSet mocks base method
func (m *MockFeaturesStore) CreateFeatureSet(arg0 int64, arg1 []string) error {
	ret := m.ctrl.Call(m, "CreateFeatureSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFeatureSet indicates an expected call of CreateFeatureSet
func (mr *MockFeaturesStoreMockRecorder) CreateFeatureSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeatureSet", reflect.TypeOf((*MockFeaturesStore)(nil).CreateFeatureSet), arg0, arg1)
}

// DeleteFeatureSet mocks base method
func (m *MockFeaturesStore) DeleteFeatureSet(arg0 int64) error {
	ret := m.ctrl.Call(m, "DeleteFeatureSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeatureSet indicates an expected call of DeleteFeatureSet
func (mr *MockFeaturesStoreMockRecorder) DeleteFeatureSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureSet", reflect.TypeOf((*MockFeaturesStore)(nil).DeleteFeatureSet), arg0)
}
