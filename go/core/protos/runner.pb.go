// Code generated by protoc-gen-go. DO NOT EDIT.
// source: runner.proto

package photon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RunnerEvaluateRequest struct {
	VersionUid string                     `protobuf:"bytes,1,opt,name=version_uid,json=versionUid" json:"version_uid,omitempty"`
	Features   map[string]*ValueInterface `protobuf:"bytes,2,rep,name=features" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RunnerEvaluateRequest) Reset()                    { *m = RunnerEvaluateRequest{} }
func (m *RunnerEvaluateRequest) String() string            { return proto.CompactTextString(m) }
func (*RunnerEvaluateRequest) ProtoMessage()               {}
func (*RunnerEvaluateRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *RunnerEvaluateRequest) GetVersionUid() string {
	if m != nil {
		return m.VersionUid
	}
	return ""
}

func (m *RunnerEvaluateRequest) GetFeatures() map[string]*ValueInterface {
	if m != nil {
		return m.Features
	}
	return nil
}

type RunnerEvaluateResponse struct {
	Result map[string]*ValueInterface `protobuf:"bytes,1,rep,name=result" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RunnerEvaluateResponse) Reset()                    { *m = RunnerEvaluateResponse{} }
func (m *RunnerEvaluateResponse) String() string            { return proto.CompactTextString(m) }
func (*RunnerEvaluateResponse) ProtoMessage()               {}
func (*RunnerEvaluateResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *RunnerEvaluateResponse) GetResult() map[string]*ValueInterface {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*RunnerEvaluateRequest)(nil), "photon.RunnerEvaluateRequest")
	proto.RegisterType((*RunnerEvaluateResponse)(nil), "photon.RunnerEvaluateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RunnerService service

type RunnerServiceClient interface {
	Evaluate(ctx context.Context, in *RunnerEvaluateRequest, opts ...grpc.CallOption) (*RunnerEvaluateResponse, error)
}

type runnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRunnerServiceClient(cc *grpc.ClientConn) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) Evaluate(ctx context.Context, in *RunnerEvaluateRequest, opts ...grpc.CallOption) (*RunnerEvaluateResponse, error) {
	out := new(RunnerEvaluateResponse)
	err := grpc.Invoke(ctx, "/photon.RunnerService/Evaluate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RunnerService service

type RunnerServiceServer interface {
	Evaluate(context.Context, *RunnerEvaluateRequest) (*RunnerEvaluateResponse, error)
}

func RegisterRunnerServiceServer(s *grpc.Server, srv RunnerServiceServer) {
	s.RegisterService(&_RunnerService_serviceDesc, srv)
}

func _RunnerService_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerEvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.RunnerService/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).Evaluate(ctx, req.(*RunnerEvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "photon.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Evaluate",
			Handler:    _RunnerService_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner.proto",
}

func init() { proto.RegisterFile("runner.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x49, 0x87, 0x65, 0xbe, 0x3a, 0x90, 0x80, 0xa3, 0x14, 0xd4, 0xb2, 0x53, 0x51, 0xc9,
	0xa1, 0x5e, 0xc4, 0xa3, 0x30, 0x65, 0x47, 0x33, 0xf4, 0xe0, 0x45, 0x6a, 0xf7, 0x86, 0xc5, 0x91,
	0xd4, 0x97, 0xa4, 0xb0, 0x4f, 0xe5, 0xb7, 0xf1, 0xf3, 0x48, 0x9b, 0x4e, 0x54, 0x74, 0x27, 0x6f,
	0xe5, 0xdf, 0xdf, 0x7b, 0xff, 0x5f, 0x12, 0xd8, 0x23, 0xa7, 0x14, 0x92, 0xa8, 0x49, 0x5b, 0xcd,
	0xc3, 0xfa, 0x59, 0x5b, 0xad, 0x12, 0x28, 0x35, 0xa1, 0xcf, 0x26, 0xef, 0x0c, 0x0e, 0x64, 0x07,
	0x4d, 0x9b, 0x62, 0xe5, 0x0a, 0x8b, 0x12, 0x5f, 0x1d, 0x1a, 0xcb, 0x8f, 0x21, 0x6a, 0x90, 0x4c,
	0xa5, 0xd5, 0xa3, 0xab, 0x16, 0x31, 0x4b, 0x59, 0xb6, 0x2b, 0xa1, 0x8f, 0xee, 0xaa, 0x05, 0xbf,
	0x81, 0xe1, 0x12, 0x0b, 0xeb, 0x08, 0x4d, 0x1c, 0xa4, 0x83, 0x2c, 0xca, 0x4f, 0x85, 0x6f, 0x10,
	0xbf, 0x6e, 0x14, 0xd7, 0x3d, 0x3d, 0x55, 0x96, 0xd6, 0xf2, 0x73, 0x38, 0x99, 0xc3, 0xe8, 0xdb,
	0x2f, 0xbe, 0x0f, 0x83, 0x17, 0x5c, 0xf7, 0x95, 0xed, 0x27, 0x3f, 0x83, 0x9d, 0x76, 0x19, 0xc6,
	0x41, 0xca, 0xb2, 0x28, 0x1f, 0x6f, 0x8a, 0xee, 0xdb, 0x70, 0xa6, 0x2c, 0xd2, 0xb2, 0x28, 0x51,
	0x7a, 0xe8, 0x32, 0xb8, 0x60, 0x93, 0x37, 0x06, 0xe3, 0x9f, 0x1a, 0xa6, 0xd6, 0xca, 0x20, 0xbf,
	0x82, 0x90, 0xd0, 0xb8, 0x95, 0x8d, 0x59, 0xa7, 0x7d, 0xf2, 0x97, 0xb6, 0xe7, 0x85, 0xec, 0x60,
	0x6f, 0xdd, 0x4f, 0x26, 0xb7, 0x10, 0x7d, 0x89, 0xff, 0xc3, 0x38, 0x7f, 0x80, 0x91, 0x17, 0x98,
	0x23, 0x35, 0x55, 0x89, 0x7c, 0x06, 0xc3, 0x8d, 0x0b, 0x3f, 0xdc, 0x7a, 0xb5, 0xc9, 0xd1, 0xf6,
	0x23, 0x3c, 0x85, 0xdd, 0x6b, 0x9f, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x7d, 0x11, 0xd8,
	0x11, 0x02, 0x00, 0x00,
}
