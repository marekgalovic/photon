// Code generated by MockGen. DO NOT EDIT.
// Source: protos/runner.pb.go

// Package mock_photon is a generated GoMock package.
package mock_photon

import (
	. "github.com/marekgalovic/photon/go/core/protos"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockRunnerServiceClient is a mock of RunnerServiceClient interface
type MockRunnerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerServiceClientMockRecorder
}

// MockRunnerServiceClientMockRecorder is the mock recorder for MockRunnerServiceClient
type MockRunnerServiceClientMockRecorder struct {
	mock *MockRunnerServiceClient
}

// NewMockRunnerServiceClient creates a new mock instance
func NewMockRunnerServiceClient(ctrl *gomock.Controller) *MockRunnerServiceClient {
	mock := &MockRunnerServiceClient{ctrl: ctrl}
	mock.recorder = &MockRunnerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunnerServiceClient) EXPECT() *MockRunnerServiceClientMockRecorder {
	return m.recorder
}

// Evaluate mocks base method
func (m *MockRunnerServiceClient) Evaluate(ctx context.Context, in *RunnerEvaluateRequest, opts ...grpc.CallOption) (*RunnerEvaluateResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Evaluate", varargs...)
	ret0, _ := ret[0].(*RunnerEvaluateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate
func (mr *MockRunnerServiceClientMockRecorder) Evaluate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockRunnerServiceClient)(nil).Evaluate), varargs...)
}

// MockRunnerServiceServer is a mock of RunnerServiceServer interface
type MockRunnerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerServiceServerMockRecorder
}

// MockRunnerServiceServerMockRecorder is the mock recorder for MockRunnerServiceServer
type MockRunnerServiceServerMockRecorder struct {
	mock *MockRunnerServiceServer
}

// NewMockRunnerServiceServer creates a new mock instance
func NewMockRunnerServiceServer(ctrl *gomock.Controller) *MockRunnerServiceServer {
	mock := &MockRunnerServiceServer{ctrl: ctrl}
	mock.recorder = &MockRunnerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunnerServiceServer) EXPECT() *MockRunnerServiceServerMockRecorder {
	return m.recorder
}

// Evaluate mocks base method
func (m *MockRunnerServiceServer) Evaluate(arg0 context.Context, arg1 *RunnerEvaluateRequest) (*RunnerEvaluateResponse, error) {
	ret := m.ctrl.Call(m, "Evaluate", arg0, arg1)
	ret0, _ := ret[0].(*RunnerEvaluateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate
func (mr *MockRunnerServiceServerMockRecorder) Evaluate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockRunnerServiceServer)(nil).Evaluate), arg0, arg1)
}
