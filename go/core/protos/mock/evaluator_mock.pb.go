// Code generated by MockGen. DO NOT EDIT.
// Source: protos/evaluator.pb.go

// Package mock_photon is a generated GoMock package.
package mock_photon

import (
	. "github.com/marekgalovic/photon/go/core/protos"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockEvaluatorServiceClient is a mock of EvaluatorServiceClient interface
type MockEvaluatorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorServiceClientMockRecorder
}

// MockEvaluatorServiceClientMockRecorder is the mock recorder for MockEvaluatorServiceClient
type MockEvaluatorServiceClientMockRecorder struct {
	mock *MockEvaluatorServiceClient
}

// NewMockEvaluatorServiceClient creates a new mock instance
func NewMockEvaluatorServiceClient(ctrl *gomock.Controller) *MockEvaluatorServiceClient {
	mock := &MockEvaluatorServiceClient{ctrl: ctrl}
	mock.recorder = &MockEvaluatorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvaluatorServiceClient) EXPECT() *MockEvaluatorServiceClientMockRecorder {
	return m.recorder
}

// Evaluate mocks base method
func (m *MockEvaluatorServiceClient) Evaluate(ctx context.Context, in *EvaluationRequest, opts ...grpc.CallOption) (*EvaluationResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Evaluate", varargs...)
	ret0, _ := ret[0].(*EvaluationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate
func (mr *MockEvaluatorServiceClientMockRecorder) Evaluate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockEvaluatorServiceClient)(nil).Evaluate), varargs...)
}

// MockEvaluatorServiceServer is a mock of EvaluatorServiceServer interface
type MockEvaluatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorServiceServerMockRecorder
}

// MockEvaluatorServiceServerMockRecorder is the mock recorder for MockEvaluatorServiceServer
type MockEvaluatorServiceServerMockRecorder struct {
	mock *MockEvaluatorServiceServer
}

// NewMockEvaluatorServiceServer creates a new mock instance
func NewMockEvaluatorServiceServer(ctrl *gomock.Controller) *MockEvaluatorServiceServer {
	mock := &MockEvaluatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockEvaluatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvaluatorServiceServer) EXPECT() *MockEvaluatorServiceServerMockRecorder {
	return m.recorder
}

// Evaluate mocks base method
func (m *MockEvaluatorServiceServer) Evaluate(arg0 context.Context, arg1 *EvaluationRequest) (*EvaluationResponse, error) {
	ret := m.ctrl.Call(m, "Evaluate", arg0, arg1)
	ret0, _ := ret[0].(*EvaluationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Evaluate indicates an expected call of Evaluate
func (mr *MockEvaluatorServiceServerMockRecorder) Evaluate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockEvaluatorServiceServer)(nil).Evaluate), arg0, arg1)
}
