// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/feature_set.proto

package serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FeatureSet struct {
	Uid     string              `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Name    string              `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key     string              `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Schemas []*FeatureSetSchema `protobuf:"bytes,4,rep,name=schemas" json:"schemas,omitempty"`
}

func (m *FeatureSet) Reset()                    { *m = FeatureSet{} }
func (m *FeatureSet) String() string            { return proto.CompactTextString(m) }
func (*FeatureSet) ProtoMessage()               {}
func (*FeatureSet) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *FeatureSet) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *FeatureSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeatureSet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FeatureSet) GetSchemas() []*FeatureSetSchema {
	if m != nil {
		return m.Schemas
	}
	return nil
}

type FeatureSetSchema struct {
	Uid        string            `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Schema     map[string]string `protobuf:"bytes,2,rep,name=schema" json:"schema,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AvroSchema string            `protobuf:"bytes,3,opt,name=avro_schema,json=avroSchema" json:"avro_schema,omitempty"`
}

func (m *FeatureSetSchema) Reset()                    { *m = FeatureSetSchema{} }
func (m *FeatureSetSchema) String() string            { return proto.CompactTextString(m) }
func (*FeatureSetSchema) ProtoMessage()               {}
func (*FeatureSetSchema) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *FeatureSetSchema) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *FeatureSetSchema) GetSchema() map[string]string {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *FeatureSetSchema) GetAvroSchema() string {
	if m != nil {
		return m.AvroSchema
	}
	return ""
}

type ListFeatureSetsRequest struct {
}

func (m *ListFeatureSetsRequest) Reset()                    { *m = ListFeatureSetsRequest{} }
func (m *ListFeatureSetsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFeatureSetsRequest) ProtoMessage()               {}
func (*ListFeatureSetsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type CreateFeatureSetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *CreateFeatureSetRequest) Reset()                    { *m = CreateFeatureSetRequest{} }
func (m *CreateFeatureSetRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFeatureSetRequest) ProtoMessage()               {}
func (*CreateFeatureSetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CreateFeatureSetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateFeatureSetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteFeatureSetRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *DeleteFeatureSetRequest) Reset()                    { *m = DeleteFeatureSetRequest{} }
func (m *DeleteFeatureSetRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFeatureSetRequest) ProtoMessage()               {}
func (*DeleteFeatureSetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *DeleteFeatureSetRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type CreateFeatureSetSchemaRequest struct {
	Schema map[string]string `protobuf:"bytes,1,rep,name=schema" json:"schema,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateFeatureSetSchemaRequest) Reset()                    { *m = CreateFeatureSetSchemaRequest{} }
func (m *CreateFeatureSetSchemaRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFeatureSetSchemaRequest) ProtoMessage()               {}
func (*CreateFeatureSetSchemaRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CreateFeatureSetSchemaRequest) GetSchema() map[string]string {
	if m != nil {
		return m.Schema
	}
	return nil
}

type DeleteFeatureSetSchemaRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *DeleteFeatureSetSchemaRequest) Reset()                    { *m = DeleteFeatureSetSchemaRequest{} }
func (m *DeleteFeatureSetSchemaRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFeatureSetSchemaRequest) ProtoMessage()               {}
func (*DeleteFeatureSetSchemaRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *DeleteFeatureSetSchemaRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func init() {
	proto.RegisterType((*FeatureSet)(nil), "serving.FeatureSet")
	proto.RegisterType((*FeatureSetSchema)(nil), "serving.FeatureSetSchema")
	proto.RegisterType((*ListFeatureSetsRequest)(nil), "serving.ListFeatureSetsRequest")
	proto.RegisterType((*CreateFeatureSetRequest)(nil), "serving.CreateFeatureSetRequest")
	proto.RegisterType((*DeleteFeatureSetRequest)(nil), "serving.DeleteFeatureSetRequest")
	proto.RegisterType((*CreateFeatureSetSchemaRequest)(nil), "serving.CreateFeatureSetSchemaRequest")
	proto.RegisterType((*DeleteFeatureSetSchemaRequest)(nil), "serving.DeleteFeatureSetSchemaRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FeatureSetService service

type FeatureSetServiceClient interface {
	ListFeatureSets(ctx context.Context, in *ListFeatureSetsRequest, opts ...grpc.CallOption) (FeatureSetService_ListFeatureSetsClient, error)
	CreateFeatureSet(ctx context.Context, in *CreateFeatureSetRequest, opts ...grpc.CallOption) (*FeatureSet, error)
	DeleteFeatureSet(ctx context.Context, in *DeleteFeatureSetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Schemas
	CreateFeatureSetSchema(ctx context.Context, in *CreateFeatureSetSchemaRequest, opts ...grpc.CallOption) (*FeatureSetSchema, error)
	DeleteFeatureSetSchema(ctx context.Context, in *DeleteFeatureSetSchemaRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type featureSetServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeatureSetServiceClient(cc *grpc.ClientConn) FeatureSetServiceClient {
	return &featureSetServiceClient{cc}
}

func (c *featureSetServiceClient) ListFeatureSets(ctx context.Context, in *ListFeatureSetsRequest, opts ...grpc.CallOption) (FeatureSetService_ListFeatureSetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FeatureSetService_serviceDesc.Streams[0], c.cc, "/serving.FeatureSetService/ListFeatureSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &featureSetServiceListFeatureSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureSetService_ListFeatureSetsClient interface {
	Recv() (*FeatureSet, error)
	grpc.ClientStream
}

type featureSetServiceListFeatureSetsClient struct {
	grpc.ClientStream
}

func (x *featureSetServiceListFeatureSetsClient) Recv() (*FeatureSet, error) {
	m := new(FeatureSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureSetServiceClient) CreateFeatureSet(ctx context.Context, in *CreateFeatureSetRequest, opts ...grpc.CallOption) (*FeatureSet, error) {
	out := new(FeatureSet)
	err := grpc.Invoke(ctx, "/serving.FeatureSetService/CreateFeatureSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureSetServiceClient) DeleteFeatureSet(ctx context.Context, in *DeleteFeatureSetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.FeatureSetService/DeleteFeatureSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureSetServiceClient) CreateFeatureSetSchema(ctx context.Context, in *CreateFeatureSetSchemaRequest, opts ...grpc.CallOption) (*FeatureSetSchema, error) {
	out := new(FeatureSetSchema)
	err := grpc.Invoke(ctx, "/serving.FeatureSetService/CreateFeatureSetSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureSetServiceClient) DeleteFeatureSetSchema(ctx context.Context, in *DeleteFeatureSetSchemaRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.FeatureSetService/DeleteFeatureSetSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeatureSetService service

type FeatureSetServiceServer interface {
	ListFeatureSets(*ListFeatureSetsRequest, FeatureSetService_ListFeatureSetsServer) error
	CreateFeatureSet(context.Context, *CreateFeatureSetRequest) (*FeatureSet, error)
	DeleteFeatureSet(context.Context, *DeleteFeatureSetRequest) (*EmptyResponse, error)
	// Schemas
	CreateFeatureSetSchema(context.Context, *CreateFeatureSetSchemaRequest) (*FeatureSetSchema, error)
	DeleteFeatureSetSchema(context.Context, *DeleteFeatureSetSchemaRequest) (*EmptyResponse, error)
}

func RegisterFeatureSetServiceServer(s *grpc.Server, srv FeatureSetServiceServer) {
	s.RegisterService(&_FeatureSetService_serviceDesc, srv)
}

func _FeatureSetService_ListFeatureSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFeatureSetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureSetServiceServer).ListFeatureSets(m, &featureSetServiceListFeatureSetsServer{stream})
}

type FeatureSetService_ListFeatureSetsServer interface {
	Send(*FeatureSet) error
	grpc.ServerStream
}

type featureSetServiceListFeatureSetsServer struct {
	grpc.ServerStream
}

func (x *featureSetServiceListFeatureSetsServer) Send(m *FeatureSet) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureSetService_CreateFeatureSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSetServiceServer).CreateFeatureSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.FeatureSetService/CreateFeatureSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSetServiceServer).CreateFeatureSet(ctx, req.(*CreateFeatureSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureSetService_DeleteFeatureSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSetServiceServer).DeleteFeatureSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.FeatureSetService/DeleteFeatureSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSetServiceServer).DeleteFeatureSet(ctx, req.(*DeleteFeatureSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureSetService_CreateFeatureSetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureSetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSetServiceServer).CreateFeatureSetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.FeatureSetService/CreateFeatureSetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSetServiceServer).CreateFeatureSetSchema(ctx, req.(*CreateFeatureSetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureSetService_DeleteFeatureSetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureSetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSetServiceServer).DeleteFeatureSetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.FeatureSetService/DeleteFeatureSetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSetServiceServer).DeleteFeatureSetSchema(ctx, req.(*DeleteFeatureSetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeatureSetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serving.FeatureSetService",
	HandlerType: (*FeatureSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeatureSet",
			Handler:    _FeatureSetService_CreateFeatureSet_Handler,
		},
		{
			MethodName: "DeleteFeatureSet",
			Handler:    _FeatureSetService_DeleteFeatureSet_Handler,
		},
		{
			MethodName: "CreateFeatureSetSchema",
			Handler:    _FeatureSetService_CreateFeatureSetSchema_Handler,
		},
		{
			MethodName: "DeleteFeatureSetSchema",
			Handler:    _FeatureSetService_DeleteFeatureSetSchema_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatureSets",
			Handler:       _FeatureSetService_ListFeatureSets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/feature_set.proto",
}

func init() { proto.RegisterFile("protos/feature_set.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0xc7, 0xd9, 0xa4, 0xaf, 0xe5, 0x4d, 0x0f, 0x2f, 0xdd, 0x27, 0x69, 0x0c, 0x94, 0x96, 0x80,
	0x52, 0x10, 0xa2, 0xb6, 0x17, 0x15, 0xc4, 0x83, 0x56, 0xa8, 0xf4, 0x94, 0x5e, 0x04, 0x0f, 0x25,
	0xd6, 0x51, 0x4b, 0xdb, 0xa4, 0x66, 0x37, 0x85, 0x7c, 0x21, 0x8f, 0x7e, 0x05, 0xbf, 0x9a, 0x24,
	0x9b, 0x26, 0x31, 0x4d, 0x8a, 0xe0, 0xa9, 0xdb, 0x9d, 0xff, 0xfc, 0x67, 0xe6, 0x37, 0x49, 0x40,
	0x5b, 0x79, 0x2e, 0x77, 0xd9, 0xf1, 0x33, 0xda, 0xdc, 0xf7, 0x70, 0xc2, 0x90, 0x9b, 0xd1, 0x15,
	0xad, 0x31, 0xf4, 0xd6, 0x33, 0xe7, 0x45, 0x6f, 0xc4, 0x92, 0xa9, 0xeb, 0xa1, 0x88, 0x19, 0x01,
	0xc0, 0xad, 0x48, 0x18, 0x23, 0xa7, 0x0a, 0xc8, 0xfe, 0xec, 0x49, 0x23, 0x1d, 0xd2, 0xfd, 0x6b,
	0x85, 0x47, 0x4a, 0xa1, 0xe2, 0xd8, 0x4b, 0xd4, 0xa4, 0xe8, 0x2a, 0x3a, 0x87, 0xaa, 0x39, 0x06,
	0x9a, 0x2c, 0x54, 0x73, 0x0c, 0x68, 0x1f, 0x6a, 0x6c, 0xfa, 0x8a, 0x4b, 0x9b, 0x69, 0x95, 0x8e,
	0xdc, 0xad, 0xf7, 0xf6, 0xcd, 0xb8, 0xa6, 0x99, 0xba, 0x8f, 0x23, 0x85, 0xb5, 0x51, 0x1a, 0x9f,
	0x04, 0x94, 0x7c, 0xb4, 0xa0, 0x83, 0x4b, 0xa8, 0x8a, 0x0c, 0x4d, 0x8a, 0xac, 0x0f, 0x4a, 0xad,
	0x4d, 0xf1, 0x33, 0x70, 0xb8, 0x17, 0x58, 0x71, 0x12, 0x6d, 0x43, 0xdd, 0x5e, 0x7b, 0xee, 0x24,
	0xf6, 0x10, 0x4d, 0x43, 0x78, 0x25, 0xd4, 0xfa, 0x39, 0xd4, 0x33, 0x79, 0x9b, 0xe1, 0x48, 0x3a,
	0xdc, 0x1e, 0xfc, 0x59, 0xdb, 0x0b, 0x7f, 0xc3, 0x40, 0xfc, 0xb9, 0x90, 0xce, 0x88, 0xa1, 0x81,
	0x3a, 0x9a, 0x31, 0x9e, 0xf6, 0xc1, 0x2c, 0x7c, 0xf3, 0x91, 0x71, 0xe3, 0x0a, 0x9a, 0xd7, 0x1e,
	0xda, 0x1c, 0xd3, 0x58, 0x1c, 0x4a, 0x88, 0x92, 0x6d, 0xa2, 0x52, 0x52, 0xd4, 0x38, 0x82, 0xe6,
	0x0d, 0x2e, 0xb0, 0xc8, 0x60, 0x0b, 0x91, 0xf1, 0x4e, 0xa0, 0x95, 0x2f, 0x17, 0xd3, 0x8e, 0x73,
	0xee, 0x12, 0x88, 0x24, 0x82, 0xd8, 0x4b, 0x20, 0xee, 0xcc, 0x2b, 0x22, 0xfa, 0x1b, 0x60, 0xa7,
	0xd0, 0xca, 0x4f, 0xf5, 0xbd, 0xcf, 0xad, 0xd9, 0x7a, 0x1f, 0x32, 0x34, 0x32, 0xea, 0xb0, 0xeb,
	0x29, 0xd2, 0x21, 0xfc, 0xcb, 0x91, 0xa7, 0xed, 0x64, 0xa4, 0xe2, 0x9d, 0xe8, 0xff, 0x0b, 0x1e,
	0x9c, 0x13, 0x42, 0x87, 0xa0, 0xe4, 0x19, 0xd0, 0x4e, 0x29, 0x9e, 0x5d, 0x66, 0x74, 0x04, 0x4a,
	0x7e, 0xbc, 0x8c, 0x55, 0xc9, 0x3e, 0x75, 0x35, 0x51, 0x0c, 0x96, 0x2b, 0x1e, 0x58, 0xc8, 0x56,
	0xae, 0xc3, 0x90, 0x3e, 0x80, 0x5a, 0xbc, 0x1c, 0x7a, 0xf8, 0xb3, 0xed, 0xe9, 0xe5, 0x6f, 0x21,
	0xbd, 0x07, 0xb5, 0x78, 0x13, 0x19, 0xf3, 0x9d, 0xab, 0x2a, 0x6b, 0xfb, 0xb1, 0x1a, 0x7d, 0x58,
	0xfa, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xca, 0x9e, 0xe9, 0x90, 0x04, 0x00, 0x00,
}
