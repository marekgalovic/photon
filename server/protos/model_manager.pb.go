// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/model_manager.proto

package serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListModelsRequest struct {
}

func (m *ListModelsRequest) Reset()                    { *m = ListModelsRequest{} }
func (m *ListModelsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModelsRequest) ProtoMessage()               {}
func (*ListModelsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type CreateModelRequest struct {
	Name  string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner string    `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Type  ModelType `protobuf:"varint,3,opt,name=type,enum=serving.ModelType" json:"type,omitempty"`
}

func (m *CreateModelRequest) Reset()                    { *m = CreateModelRequest{} }
func (m *CreateModelRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateModelRequest) ProtoMessage()               {}
func (*CreateModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CreateModelRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateModelRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CreateModelRequest) GetType() ModelType {
	if m != nil {
		return m.Type
	}
	return ModelType_PMML
}

type DeleteModelRequest struct {
	ModelUid string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
}

func (m *DeleteModelRequest) Reset()                    { *m = DeleteModelRequest{} }
func (m *DeleteModelRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteModelRequest) ProtoMessage()               {}
func (*DeleteModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *DeleteModelRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

type CreateModelVersionRequest struct {
	Name            string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RequestFeatures []string `protobuf:"bytes,2,rep,name=request_features,json=requestFeatures" json:"request_features,omitempty"`
	StoredFeatures  []string `protobuf:"bytes,3,rep,name=stored_features,json=storedFeatures" json:"stored_features,omitempty"`
}

func (m *CreateModelVersionRequest) Reset()                    { *m = CreateModelVersionRequest{} }
func (m *CreateModelVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateModelVersionRequest) ProtoMessage()               {}
func (*CreateModelVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *CreateModelVersionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateModelVersionRequest) GetRequestFeatures() []string {
	if m != nil {
		return m.RequestFeatures
	}
	return nil
}

func (m *CreateModelVersionRequest) GetStoredFeatures() []string {
	if m != nil {
		return m.StoredFeatures
	}
	return nil
}

type DeleteModelVersionRequest struct {
	ModelUid   string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
	VersionUid string `protobuf:"bytes,2,opt,name=version_uid,json=versionUid" json:"version_uid,omitempty"`
}

func (m *DeleteModelVersionRequest) Reset()                    { *m = DeleteModelVersionRequest{} }
func (m *DeleteModelVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteModelVersionRequest) ProtoMessage()               {}
func (*DeleteModelVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *DeleteModelVersionRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

func (m *DeleteModelVersionRequest) GetVersionUid() string {
	if m != nil {
		return m.VersionUid
	}
	return ""
}

func init() {
	proto.RegisterType((*ListModelsRequest)(nil), "serving.ListModelsRequest")
	proto.RegisterType((*CreateModelRequest)(nil), "serving.CreateModelRequest")
	proto.RegisterType((*DeleteModelRequest)(nil), "serving.DeleteModelRequest")
	proto.RegisterType((*CreateModelVersionRequest)(nil), "serving.CreateModelVersionRequest")
	proto.RegisterType((*DeleteModelVersionRequest)(nil), "serving.DeleteModelVersionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModelManagerService service

type ModelManagerServiceClient interface {
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (ModelManagerService_ListModelsClient, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error)
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Versions
	CreateModelVersion(ctx context.Context, in *CreateModelVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error)
	DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type modelManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewModelManagerServiceClient(cc *grpc.ClientConn) ModelManagerServiceClient {
	return &modelManagerServiceClient{cc}
}

func (c *modelManagerServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (ModelManagerService_ListModelsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ModelManagerService_serviceDesc.Streams[0], c.cc, "/serving.ModelManagerService/ListModels", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelManagerServiceListModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelManagerService_ListModelsClient interface {
	Recv() (*Model, error)
	grpc.ClientStream
}

type modelManagerServiceListModelsClient struct {
	grpc.ClientStream
}

func (x *modelManagerServiceListModelsClient) Recv() (*Model, error) {
	m := new(Model)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelManagerServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/CreateModel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/DeleteModel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) CreateModelVersion(ctx context.Context, in *CreateModelVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error) {
	out := new(ModelVersion)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/CreateModelVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/DeleteModelVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModelManagerService service

type ModelManagerServiceServer interface {
	ListModels(*ListModelsRequest, ModelManagerService_ListModelsServer) error
	CreateModel(context.Context, *CreateModelRequest) (*Model, error)
	DeleteModel(context.Context, *DeleteModelRequest) (*EmptyResponse, error)
	// Versions
	CreateModelVersion(context.Context, *CreateModelVersionRequest) (*ModelVersion, error)
	DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*EmptyResponse, error)
}

func RegisterModelManagerServiceServer(s *grpc.Server, srv ModelManagerServiceServer) {
	s.RegisterService(&_ModelManagerService_serviceDesc, srv)
}

func _ModelManagerService_ListModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListModelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelManagerServiceServer).ListModels(m, &modelManagerServiceListModelsServer{stream})
}

type ModelManagerService_ListModelsServer interface {
	Send(*Model) error
	grpc.ServerStream
}

type modelManagerServiceListModelsServer struct {
	grpc.ServerStream
}

func (x *modelManagerServiceListModelsServer) Send(m *Model) error {
	return x.ServerStream.SendMsg(m)
}

func _ModelManagerService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_CreateModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).CreateModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/CreateModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).CreateModelVersion(ctx, req.(*CreateModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_DeleteModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).DeleteModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/DeleteModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).DeleteModelVersion(ctx, req.(*DeleteModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serving.ModelManagerService",
	HandlerType: (*ModelManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModel",
			Handler:    _ModelManagerService_CreateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _ModelManagerService_DeleteModel_Handler,
		},
		{
			MethodName: "CreateModelVersion",
			Handler:    _ModelManagerService_CreateModelVersion_Handler,
		},
		{
			MethodName: "DeleteModelVersion",
			Handler:    _ModelManagerService_DeleteModelVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListModels",
			Handler:       _ModelManagerService_ListModels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/model_manager.proto",
}

func init() { proto.RegisterFile("protos/model_manager.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xe2, 0x30,
	0x10, 0x55, 0x80, 0xfd, 0x60, 0x90, 0x60, 0x19, 0x76, 0x57, 0x21, 0x1c, 0x16, 0xe5, 0xb0, 0xa5,
	0x17, 0xda, 0xd2, 0x1b, 0xc7, 0x7e, 0x9d, 0x8a, 0x5a, 0xa5, 0xa5, 0x52, 0x4f, 0x28, 0x25, 0x03,
	0x8a, 0x44, 0xe2, 0xd4, 0x36, 0x54, 0x9c, 0xfb, 0x97, 0xfb, 0x03, 0x2a, 0x6c, 0x03, 0x09, 0x29,
	0xdc, 0x92, 0x37, 0x6f, 0x66, 0x9e, 0xdf, 0xb3, 0xc1, 0x49, 0x38, 0x93, 0x4c, 0x9c, 0x44, 0x2c,
	0xa0, 0xd9, 0x28, 0xf2, 0x63, 0x7f, 0x4a, 0xbc, 0xab, 0x40, 0xfc, 0x21, 0x88, 0x2f, 0xc2, 0x78,
	0xea, 0xd4, 0x0d, 0x69, 0xcc, 0x38, 0xe9, 0x9a, 0xdb, 0x80, 0xfa, 0x6d, 0x28, 0xe4, 0x60, 0xd5,
	0x26, 0x3c, 0x7a, 0x9d, 0x93, 0x90, 0xee, 0x04, 0xf0, 0x92, 0x93, 0x2f, 0x49, 0xc1, 0x06, 0x45,
	0x84, 0x52, 0xec, 0x47, 0x64, 0x5b, 0x6d, 0xab, 0x53, 0xf6, 0xd4, 0x37, 0xfe, 0x86, 0x6f, 0xec,
	0x2d, 0x26, 0x6e, 0x17, 0x14, 0xa8, 0x7f, 0xf0, 0x3f, 0x94, 0xe4, 0x32, 0x21, 0xbb, 0xd8, 0xb6,
	0x3a, 0xd5, 0x1e, 0x76, 0xcd, 0xfe, 0xae, 0x1a, 0xf7, 0xb8, 0x4c, 0xc8, 0x53, 0x75, 0xf7, 0x0c,
	0xf0, 0x8a, 0x66, 0xb4, 0xb3, 0xa7, 0x05, 0x65, 0x7d, 0x8a, 0x79, 0x18, 0x98, 0x65, 0x3f, 0x15,
	0x30, 0x0c, 0x03, 0xf7, 0xdd, 0x82, 0x66, 0x4a, 0xdb, 0x13, 0x71, 0x11, 0xb2, 0xf8, 0x90, 0xc4,
	0x63, 0xf8, 0xc5, 0x75, 0x79, 0x34, 0x21, 0x5f, 0xce, 0x39, 0x09, 0xbb, 0xd0, 0x2e, 0x76, 0xca,
	0x5e, 0xcd, 0xe0, 0x37, 0x06, 0xc6, 0x23, 0xa8, 0x09, 0xc9, 0x38, 0x05, 0x5b, 0x66, 0x51, 0x31,
	0xab, 0x1a, 0x5e, 0x13, 0xdd, 0x67, 0x68, 0xa6, 0x84, 0xef, 0x88, 0x38, 0xa4, 0x1f, 0xff, 0x41,
	0x65, 0xa1, 0xe9, 0xaa, 0xac, 0x6d, 0x03, 0x03, 0x0d, 0xc3, 0xa0, 0xf7, 0x51, 0x80, 0x86, 0x9a,
	0x3a, 0xd0, 0x19, 0x3e, 0xac, 0xbc, 0x1b, 0x13, 0xf6, 0x01, 0xb6, 0x41, 0xa1, 0xb3, 0xf1, 0x34,
	0x97, 0x9e, 0x53, 0xcd, 0xfa, 0x7d, 0x6a, 0x61, 0x1f, 0x2a, 0x29, 0xcf, 0xb0, 0xb5, 0x21, 0xe4,
	0x53, 0xde, 0xed, 0xc6, 0x0b, 0xa8, 0xa4, 0x8e, 0x9a, 0xea, 0xcd, 0x27, 0xe7, 0xfc, 0xdd, 0x14,
	0xaf, 0xa3, 0x44, 0x2e, 0x3d, 0x12, 0x09, 0x8b, 0x05, 0xe1, 0x5d, 0xe6, 0x3e, 0x19, 0xbb, 0xd0,
	0xfd, 0x4a, 0x46, 0xd6, 0x4b, 0xe7, 0x4f, 0x56, 0xcd, 0xba, 0xf5, 0x3e, 0x73, 0x71, 0xf2, 0x03,
	0xf7, 0x86, 0xb3, 0x4f, 0xe2, 0xcb, 0x77, 0xf5, 0x1c, 0xce, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x20, 0x0e, 0xb4, 0x75, 0x48, 0x03, 0x00, 0x00,
}
