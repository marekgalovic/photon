// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/model_manager.proto

package serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListModelsRequest struct {
}

func (m *ListModelsRequest) Reset()                    { *m = ListModelsRequest{} }
func (m *ListModelsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModelsRequest) ProtoMessage()               {}
func (*ListModelsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type FindModelRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *FindModelRequest) Reset()                    { *m = FindModelRequest{} }
func (m *FindModelRequest) String() string            { return proto.CompactTextString(m) }
func (*FindModelRequest) ProtoMessage()               {}
func (*FindModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *FindModelRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type CreateModelRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *CreateModelRequest) Reset()                    { *m = CreateModelRequest{} }
func (m *CreateModelRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateModelRequest) ProtoMessage()               {}
func (*CreateModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *CreateModelRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateModelRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type DeleteModelRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *DeleteModelRequest) Reset()                    { *m = DeleteModelRequest{} }
func (m *DeleteModelRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteModelRequest) ProtoMessage()               {}
func (*DeleteModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *DeleteModelRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type ListVersionsRequest struct {
	ModelUid string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
}

func (m *ListVersionsRequest) Reset()                    { *m = ListVersionsRequest{} }
func (m *ListVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsRequest) ProtoMessage()               {}
func (*ListVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *ListVersionsRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

type FindVersionRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *FindVersionRequest) Reset()                    { *m = FindVersionRequest{} }
func (m *FindVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*FindVersionRequest) ProtoMessage()               {}
func (*FindVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *FindVersionRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type PrimaryVersionRequest struct {
	ModelUid string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
}

func (m *PrimaryVersionRequest) Reset()                    { *m = PrimaryVersionRequest{} }
func (m *PrimaryVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*PrimaryVersionRequest) ProtoMessage()               {}
func (*PrimaryVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *PrimaryVersionRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

type SetPrimaryVersionRequest struct {
	ModelUid string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
	Uid      string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
}

func (m *SetPrimaryVersionRequest) Reset()                    { *m = SetPrimaryVersionRequest{} }
func (m *SetPrimaryVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPrimaryVersionRequest) ProtoMessage()               {}
func (*SetPrimaryVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *SetPrimaryVersionRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

func (m *SetPrimaryVersionRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type CreateVersionRequest struct {
	ModelUid        string   `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsPrimary       bool     `protobuf:"varint,3,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsShadow        bool     `protobuf:"varint,4,opt,name=is_shadow,json=isShadow" json:"is_shadow,omitempty"`
	RequestFeatures []string `protobuf:"bytes,5,rep,name=request_features,json=requestFeatures" json:"request_features,omitempty"`
	StoredFeatures  []string `protobuf:"bytes,6,rep,name=stored_features,json=storedFeatures" json:"stored_features,omitempty"`
}

func (m *CreateVersionRequest) Reset()                    { *m = CreateVersionRequest{} }
func (m *CreateVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionRequest) ProtoMessage()               {}
func (*CreateVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *CreateVersionRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

func (m *CreateVersionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVersionRequest) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *CreateVersionRequest) GetIsShadow() bool {
	if m != nil {
		return m.IsShadow
	}
	return false
}

func (m *CreateVersionRequest) GetRequestFeatures() []string {
	if m != nil {
		return m.RequestFeatures
	}
	return nil
}

func (m *CreateVersionRequest) GetStoredFeatures() []string {
	if m != nil {
		return m.StoredFeatures
	}
	return nil
}

type DeleteVersionRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *DeleteVersionRequest) Reset()                    { *m = DeleteVersionRequest{} }
func (m *DeleteVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionRequest) ProtoMessage()               {}
func (*DeleteVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *DeleteVersionRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func init() {
	proto.RegisterType((*ListModelsRequest)(nil), "serving.ListModelsRequest")
	proto.RegisterType((*FindModelRequest)(nil), "serving.FindModelRequest")
	proto.RegisterType((*CreateModelRequest)(nil), "serving.CreateModelRequest")
	proto.RegisterType((*DeleteModelRequest)(nil), "serving.DeleteModelRequest")
	proto.RegisterType((*ListVersionsRequest)(nil), "serving.ListVersionsRequest")
	proto.RegisterType((*FindVersionRequest)(nil), "serving.FindVersionRequest")
	proto.RegisterType((*PrimaryVersionRequest)(nil), "serving.PrimaryVersionRequest")
	proto.RegisterType((*SetPrimaryVersionRequest)(nil), "serving.SetPrimaryVersionRequest")
	proto.RegisterType((*CreateVersionRequest)(nil), "serving.CreateVersionRequest")
	proto.RegisterType((*DeleteVersionRequest)(nil), "serving.DeleteVersionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModelManagerService service

type ModelManagerServiceClient interface {
	List(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (ModelManagerService_ListClient, error)
	Find(ctx context.Context, in *FindModelRequest, opts ...grpc.CallOption) (*Model, error)
	Create(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error)
	Delete(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Versions
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (ModelManagerService_ListVersionsClient, error)
	FindVersion(ctx context.Context, in *FindVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error)
	PrimaryVersion(ctx context.Context, in *PrimaryVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error)
	SetPrimaryVersion(ctx context.Context, in *SetPrimaryVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error)
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type modelManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewModelManagerServiceClient(cc *grpc.ClientConn) ModelManagerServiceClient {
	return &modelManagerServiceClient{cc}
}

func (c *modelManagerServiceClient) List(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (ModelManagerService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ModelManagerService_serviceDesc.Streams[0], c.cc, "/serving.ModelManagerService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelManagerServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelManagerService_ListClient interface {
	Recv() (*Model, error)
	grpc.ClientStream
}

type modelManagerServiceListClient struct {
	grpc.ClientStream
}

func (x *modelManagerServiceListClient) Recv() (*Model, error) {
	m := new(Model)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelManagerServiceClient) Find(ctx context.Context, in *FindModelRequest, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) Create(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) Delete(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (ModelManagerService_ListVersionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ModelManagerService_serviceDesc.Streams[1], c.cc, "/serving.ModelManagerService/ListVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelManagerServiceListVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelManagerService_ListVersionsClient interface {
	Recv() (*ModelVersion, error)
	grpc.ClientStream
}

type modelManagerServiceListVersionsClient struct {
	grpc.ClientStream
}

func (x *modelManagerServiceListVersionsClient) Recv() (*ModelVersion, error) {
	m := new(ModelVersion)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelManagerServiceClient) FindVersion(ctx context.Context, in *FindVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error) {
	out := new(ModelVersion)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/FindVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) PrimaryVersion(ctx context.Context, in *PrimaryVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error) {
	out := new(ModelVersion)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/PrimaryVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) SetPrimaryVersion(ctx context.Context, in *SetPrimaryVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/SetPrimaryVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error) {
	out := new(ModelVersion)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/CreateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelManagerServiceClient) DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelManagerService/DeleteVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModelManagerService service

type ModelManagerServiceServer interface {
	List(*ListModelsRequest, ModelManagerService_ListServer) error
	Find(context.Context, *FindModelRequest) (*Model, error)
	Create(context.Context, *CreateModelRequest) (*Model, error)
	Delete(context.Context, *DeleteModelRequest) (*EmptyResponse, error)
	// Versions
	ListVersions(*ListVersionsRequest, ModelManagerService_ListVersionsServer) error
	FindVersion(context.Context, *FindVersionRequest) (*ModelVersion, error)
	PrimaryVersion(context.Context, *PrimaryVersionRequest) (*ModelVersion, error)
	SetPrimaryVersion(context.Context, *SetPrimaryVersionRequest) (*EmptyResponse, error)
	CreateVersion(context.Context, *CreateVersionRequest) (*ModelVersion, error)
	DeleteVersion(context.Context, *DeleteVersionRequest) (*EmptyResponse, error)
}

func RegisterModelManagerServiceServer(s *grpc.Server, srv ModelManagerServiceServer) {
	s.RegisterService(&_ModelManagerService_serviceDesc, srv)
}

func _ModelManagerService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListModelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelManagerServiceServer).List(m, &modelManagerServiceListServer{stream})
}

type ModelManagerService_ListServer interface {
	Send(*Model) error
	grpc.ServerStream
}

type modelManagerServiceListServer struct {
	grpc.ServerStream
}

func (x *modelManagerServiceListServer) Send(m *Model) error {
	return x.ServerStream.SendMsg(m)
}

func _ModelManagerService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).Find(ctx, req.(*FindModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).Create(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).Delete(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_ListVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVersionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelManagerServiceServer).ListVersions(m, &modelManagerServiceListVersionsServer{stream})
}

type ModelManagerService_ListVersionsServer interface {
	Send(*ModelVersion) error
	grpc.ServerStream
}

type modelManagerServiceListVersionsServer struct {
	grpc.ServerStream
}

func (x *modelManagerServiceListVersionsServer) Send(m *ModelVersion) error {
	return x.ServerStream.SendMsg(m)
}

func _ModelManagerService_FindVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).FindVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/FindVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).FindVersion(ctx, req.(*FindVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_PrimaryVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).PrimaryVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/PrimaryVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).PrimaryVersion(ctx, req.(*PrimaryVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_SetPrimaryVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrimaryVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).SetPrimaryVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/SetPrimaryVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).SetPrimaryVersion(ctx, req.(*SetPrimaryVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_CreateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).CreateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/CreateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).CreateVersion(ctx, req.(*CreateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelManagerService_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelManagerService/DeleteVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).DeleteVersion(ctx, req.(*DeleteVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serving.ModelManagerService",
	HandlerType: (*ModelManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _ModelManagerService_Find_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ModelManagerService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ModelManagerService_Delete_Handler,
		},
		{
			MethodName: "FindVersion",
			Handler:    _ModelManagerService_FindVersion_Handler,
		},
		{
			MethodName: "PrimaryVersion",
			Handler:    _ModelManagerService_PrimaryVersion_Handler,
		},
		{
			MethodName: "SetPrimaryVersion",
			Handler:    _ModelManagerService_SetPrimaryVersion_Handler,
		},
		{
			MethodName: "CreateVersion",
			Handler:    _ModelManagerService_CreateVersion_Handler,
		},
		{
			MethodName: "DeleteVersion",
			Handler:    _ModelManagerService_DeleteVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ModelManagerService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListVersions",
			Handler:       _ModelManagerService_ListVersions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/model_manager.proto",
}

func init() { proto.RegisterFile("protos/model_manager.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x9b, 0x0b, 0xc9, 0x40, 0xd3, 0x64, 0x92, 0x22, 0xe3, 0x52, 0x14, 0x2c, 0x04, 0xe1,
	0x25, 0x94, 0x52, 0x1e, 0x41, 0x42, 0xd0, 0x20, 0x24, 0x8a, 0x90, 0x23, 0x78, 0x8d, 0x4c, 0x3d,
	0x94, 0x95, 0x6a, 0x6f, 0xd8, 0x75, 0xa8, 0xfa, 0x43, 0xfc, 0x12, 0xbf, 0x83, 0xf6, 0x12, 0xc7,
	0x97, 0xba, 0xd0, 0x37, 0xef, 0x99, 0x33, 0x67, 0xcf, 0xee, 0x9c, 0x35, 0x78, 0x4b, 0xc1, 0x53,
	0x2e, 0x9f, 0xc5, 0x3c, 0xa2, 0xf3, 0x45, 0x1c, 0x26, 0xe1, 0x19, 0x89, 0xa9, 0x06, 0xf1, 0x96,
	0x24, 0xf1, 0x8b, 0x25, 0x67, 0xde, 0xc0, 0x92, 0x4e, 0xb9, 0x20, 0x53, 0xf3, 0x87, 0x30, 0xf8,
	0xc8, 0x64, 0x7a, 0xa2, 0xda, 0x64, 0x40, 0x3f, 0x57, 0x24, 0x53, 0xff, 0x11, 0xf4, 0x67, 0x2c,
	0x89, 0x34, 0x68, 0x31, 0xec, 0x43, 0x63, 0xc5, 0x22, 0xd7, 0x19, 0x3b, 0x93, 0x6e, 0xa0, 0x3e,
	0xfd, 0xd7, 0x80, 0x6f, 0x05, 0x85, 0x29, 0x15, 0x78, 0x08, 0xcd, 0x24, 0x8c, 0xc9, 0x12, 0xf5,
	0x37, 0x8e, 0xa0, 0xc5, 0x2f, 0x12, 0x12, 0xee, 0x96, 0x06, 0xcd, 0xc2, 0x7f, 0x0c, 0xf8, 0x8e,
	0xce, 0xa9, 0xd4, 0x5f, 0xdd, 0xe7, 0x10, 0x86, 0xca, 0xe2, 0x57, 0x12, 0x92, 0xf1, 0x64, 0x6d,
	0x12, 0xf7, 0xa0, 0x6b, 0x0e, 0xbb, 0xa1, 0x77, 0x34, 0xf0, 0x85, 0x45, 0x4a, 0x5b, 0x9d, 0xc0,
	0xf6, 0xd4, 0x6b, 0x1f, 0xc1, 0xee, 0x67, 0xc1, 0xe2, 0x50, 0x5c, 0x96, 0xa8, 0xd7, 0xaa, 0x7f,
	0x00, 0x77, 0x4e, 0xe9, 0xcd, 0x1b, 0xd7, 0x06, 0xb6, 0x36, 0x06, 0xfe, 0x38, 0x30, 0x32, 0xb7,
	0x78, 0x13, 0x9d, 0xf5, 0x25, 0x6f, 0xe5, 0x2e, 0x79, 0x1f, 0x80, 0xc9, 0xc5, 0xd2, 0x98, 0x72,
	0x1b, 0x63, 0x67, 0xd2, 0x09, 0xba, 0x4c, 0x5a, 0x97, 0x4a, 0x8f, 0xc9, 0x85, 0xfc, 0x11, 0x46,
	0xfc, 0xc2, 0x6d, 0xea, 0x6a, 0x87, 0xc9, 0xb9, 0x5e, 0xe3, 0x53, 0xe8, 0x0b, 0xb3, 0xef, 0xe2,
	0x3b, 0x85, 0xe9, 0x4a, 0x90, 0x74, 0x5b, 0xe3, 0xc6, 0xa4, 0x1b, 0xec, 0x58, 0x7c, 0x66, 0x61,
	0x7c, 0x02, 0x3b, 0x32, 0xe5, 0x82, 0xa2, 0x0d, 0xb3, 0xad, 0x99, 0x3d, 0x03, 0xaf, 0x89, 0xfe,
	0x04, 0x46, 0x66, 0xbc, 0xff, 0x1a, 0xc2, 0xe1, 0xef, 0x16, 0x0c, 0x75, 0x06, 0x4e, 0x4c, 0x6c,
	0xe7, 0x2a, 0xae, 0xa7, 0x84, 0x47, 0xd0, 0x54, 0x83, 0x47, 0x6f, 0x6a, 0x03, 0x3c, 0xad, 0x44,
	0xd5, 0xeb, 0x65, 0x35, 0x8d, 0x1f, 0x38, 0xf8, 0x1c, 0x9a, 0x6a, 0xf4, 0x78, 0x2f, 0xab, 0x94,
	0xb3, 0x5c, 0x6e, 0xc2, 0x97, 0xd0, 0x36, 0x33, 0xc0, 0xbd, 0xac, 0x52, 0x8d, 0x76, 0xa5, 0xed,
	0x15, 0xb4, 0xcd, 0x09, 0x73, 0x6d, 0xd5, 0x44, 0x7b, 0x77, 0xb3, 0xe2, 0x71, 0xbc, 0x4c, 0x2f,
	0x03, 0x92, 0x4b, 0x9e, 0x48, 0xc2, 0x63, 0xb8, 0x93, 0xcf, 0x35, 0xde, 0x2f, 0x1c, 0xb3, 0x14,
	0x77, 0x6f, 0xb7, 0xb8, 0xb9, 0x2d, 0x1f, 0x38, 0xf8, 0x06, 0x6e, 0xe7, 0xa2, 0x9e, 0xb3, 0x52,
	0x7d, 0x00, 0x35, 0x22, 0xf8, 0x1e, 0x7a, 0xc5, 0x30, 0xe3, 0x83, 0x8c, 0x78, 0x65, 0xca, 0xeb,
	0x84, 0x3e, 0xc1, 0xa0, 0xf2, 0x30, 0xf0, 0x61, 0xc6, 0xad, 0x7b, 0x34, 0xd7, 0x5c, 0xd1, 0x76,
	0xe1, 0x71, 0xe0, 0x7e, 0x69, 0x3e, 0xff, 0x67, 0x6b, 0x06, 0xdb, 0x85, 0x28, 0xe6, 0x64, 0xae,
	0x8a, 0x68, 0x9d, 0x9d, 0x6f, 0x6d, 0xfd, 0xcf, 0x7c, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x01,
	0x50, 0x82, 0x3f, 0x6d, 0x05, 0x00, 0x00,
}
