// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/models.proto

package serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ModelType int32

const (
	ModelType_PMML       ModelType = 0
	ModelType_TENSORFLOW ModelType = 1
)

var ModelType_name = map[int32]string{
	0: "PMML",
	1: "TENSORFLOW",
}
var ModelType_value = map[string]int32{
	"PMML":       0,
	"TENSORFLOW": 1,
}

func (x ModelType) String() string {
	return proto.EnumName(ModelType_name, int32(x))
}
func (ModelType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type Model struct {
	Uid       string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Owner     string `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	CreatedAt int32  `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt int32  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Model) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Model) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Model) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Model) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Model) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ModelVersion struct {
	Uid             string   `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsPrimary       bool     `protobuf:"varint,3,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsShadow        bool     `protobuf:"varint,4,opt,name=is_shadow,json=isShadow" json:"is_shadow,omitempty"`
	RequestFeatures []string `protobuf:"bytes,5,rep,name=request_features,json=requestFeatures" json:"request_features,omitempty"`
	StoredFeatures  []string `protobuf:"bytes,6,rep,name=stored_features,json=storedFeatures" json:"stored_features,omitempty"`
	CreatedAt       int32    `protobuf:"varint,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt       int32    `protobuf:"varint,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *ModelVersion) Reset()                    { *m = ModelVersion{} }
func (m *ModelVersion) String() string            { return proto.CompactTextString(m) }
func (*ModelVersion) ProtoMessage()               {}
func (*ModelVersion) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ModelVersion) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ModelVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelVersion) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *ModelVersion) GetIsShadow() bool {
	if m != nil {
		return m.IsShadow
	}
	return false
}

func (m *ModelVersion) GetRequestFeatures() []string {
	if m != nil {
		return m.RequestFeatures
	}
	return nil
}

func (m *ModelVersion) GetStoredFeatures() []string {
	if m != nil {
		return m.StoredFeatures
	}
	return nil
}

func (m *ModelVersion) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ModelVersion) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type ListModelsRequest struct {
}

func (m *ListModelsRequest) Reset()                    { *m = ListModelsRequest{} }
func (m *ListModelsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListModelsRequest) ProtoMessage()               {}
func (*ListModelsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type FindModelRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *FindModelRequest) Reset()                    { *m = FindModelRequest{} }
func (m *FindModelRequest) String() string            { return proto.CompactTextString(m) }
func (*FindModelRequest) ProtoMessage()               {}
func (*FindModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *FindModelRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type CreateModelRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *CreateModelRequest) Reset()                    { *m = CreateModelRequest{} }
func (m *CreateModelRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateModelRequest) ProtoMessage()               {}
func (*CreateModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *CreateModelRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateModelRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type DeleteModelRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *DeleteModelRequest) Reset()                    { *m = DeleteModelRequest{} }
func (m *DeleteModelRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteModelRequest) ProtoMessage()               {}
func (*DeleteModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *DeleteModelRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type ListVersionsRequest struct {
	ModelUid string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
}

func (m *ListVersionsRequest) Reset()                    { *m = ListVersionsRequest{} }
func (m *ListVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsRequest) ProtoMessage()               {}
func (*ListVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *ListVersionsRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

type FindVersionRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *FindVersionRequest) Reset()                    { *m = FindVersionRequest{} }
func (m *FindVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*FindVersionRequest) ProtoMessage()               {}
func (*FindVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *FindVersionRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type SetPrimaryVersionRequest struct {
	ModelUid string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
	Uid      string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
}

func (m *SetPrimaryVersionRequest) Reset()                    { *m = SetPrimaryVersionRequest{} }
func (m *SetPrimaryVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPrimaryVersionRequest) ProtoMessage()               {}
func (*SetPrimaryVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *SetPrimaryVersionRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

func (m *SetPrimaryVersionRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type CreateVersionRequest struct {
	ModelUid        string   `protobuf:"bytes,1,opt,name=model_uid,json=modelUid" json:"model_uid,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsPrimary       bool     `protobuf:"varint,3,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsShadow        bool     `protobuf:"varint,4,opt,name=is_shadow,json=isShadow" json:"is_shadow,omitempty"`
	RequestFeatures []string `protobuf:"bytes,5,rep,name=request_features,json=requestFeatures" json:"request_features,omitempty"`
	StoredFeatures  []string `protobuf:"bytes,6,rep,name=stored_features,json=storedFeatures" json:"stored_features,omitempty"`
}

func (m *CreateVersionRequest) Reset()                    { *m = CreateVersionRequest{} }
func (m *CreateVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionRequest) ProtoMessage()               {}
func (*CreateVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *CreateVersionRequest) GetModelUid() string {
	if m != nil {
		return m.ModelUid
	}
	return ""
}

func (m *CreateVersionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVersionRequest) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *CreateVersionRequest) GetIsShadow() bool {
	if m != nil {
		return m.IsShadow
	}
	return false
}

func (m *CreateVersionRequest) GetRequestFeatures() []string {
	if m != nil {
		return m.RequestFeatures
	}
	return nil
}

func (m *CreateVersionRequest) GetStoredFeatures() []string {
	if m != nil {
		return m.StoredFeatures
	}
	return nil
}

type DeleteVersionRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *DeleteVersionRequest) Reset()                    { *m = DeleteVersionRequest{} }
func (m *DeleteVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionRequest) ProtoMessage()               {}
func (*DeleteVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *DeleteVersionRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func init() {
	proto.RegisterType((*Model)(nil), "serving.Model")
	proto.RegisterType((*ModelVersion)(nil), "serving.ModelVersion")
	proto.RegisterType((*ListModelsRequest)(nil), "serving.ListModelsRequest")
	proto.RegisterType((*FindModelRequest)(nil), "serving.FindModelRequest")
	proto.RegisterType((*CreateModelRequest)(nil), "serving.CreateModelRequest")
	proto.RegisterType((*DeleteModelRequest)(nil), "serving.DeleteModelRequest")
	proto.RegisterType((*ListVersionsRequest)(nil), "serving.ListVersionsRequest")
	proto.RegisterType((*FindVersionRequest)(nil), "serving.FindVersionRequest")
	proto.RegisterType((*SetPrimaryVersionRequest)(nil), "serving.SetPrimaryVersionRequest")
	proto.RegisterType((*CreateVersionRequest)(nil), "serving.CreateVersionRequest")
	proto.RegisterType((*DeleteVersionRequest)(nil), "serving.DeleteVersionRequest")
	proto.RegisterEnum("serving.ModelType", ModelType_name, ModelType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ModelsService service

type ModelsServiceClient interface {
	List(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (ModelsService_ListClient, error)
	Find(ctx context.Context, in *FindModelRequest, opts ...grpc.CallOption) (*Model, error)
	Create(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error)
	Delete(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Versions
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (ModelsService_ListVersionsClient, error)
	FindVersion(ctx context.Context, in *FindVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error)
	SetPrimaryVersion(ctx context.Context, in *SetPrimaryVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error)
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type modelsServiceClient struct {
	cc *grpc.ClientConn
}

func NewModelsServiceClient(cc *grpc.ClientConn) ModelsServiceClient {
	return &modelsServiceClient{cc}
}

func (c *modelsServiceClient) List(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (ModelsService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ModelsService_serviceDesc.Streams[0], c.cc, "/serving.ModelsService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelsServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelsService_ListClient interface {
	Recv() (*Model, error)
	grpc.ClientStream
}

type modelsServiceListClient struct {
	grpc.ClientStream
}

func (x *modelsServiceListClient) Recv() (*Model, error) {
	m := new(Model)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelsServiceClient) Find(ctx context.Context, in *FindModelRequest, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := grpc.Invoke(ctx, "/serving.ModelsService/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) Create(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := grpc.Invoke(ctx, "/serving.ModelsService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) Delete(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelsService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (ModelsService_ListVersionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ModelsService_serviceDesc.Streams[1], c.cc, "/serving.ModelsService/ListVersions", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelsServiceListVersionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelsService_ListVersionsClient interface {
	Recv() (*ModelVersion, error)
	grpc.ClientStream
}

type modelsServiceListVersionsClient struct {
	grpc.ClientStream
}

func (x *modelsServiceListVersionsClient) Recv() (*ModelVersion, error) {
	m := new(ModelVersion)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelsServiceClient) FindVersion(ctx context.Context, in *FindVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error) {
	out := new(ModelVersion)
	err := grpc.Invoke(ctx, "/serving.ModelsService/FindVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) SetPrimaryVersion(ctx context.Context, in *SetPrimaryVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelsService/SetPrimaryVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (*ModelVersion, error) {
	out := new(ModelVersion)
	err := grpc.Invoke(ctx, "/serving.ModelsService/CreateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/serving.ModelsService/DeleteVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ModelsService service

type ModelsServiceServer interface {
	List(*ListModelsRequest, ModelsService_ListServer) error
	Find(context.Context, *FindModelRequest) (*Model, error)
	Create(context.Context, *CreateModelRequest) (*Model, error)
	Delete(context.Context, *DeleteModelRequest) (*EmptyResponse, error)
	// Versions
	ListVersions(*ListVersionsRequest, ModelsService_ListVersionsServer) error
	FindVersion(context.Context, *FindVersionRequest) (*ModelVersion, error)
	SetPrimaryVersion(context.Context, *SetPrimaryVersionRequest) (*EmptyResponse, error)
	CreateVersion(context.Context, *CreateVersionRequest) (*ModelVersion, error)
	DeleteVersion(context.Context, *DeleteVersionRequest) (*EmptyResponse, error)
}

func RegisterModelsServiceServer(s *grpc.Server, srv ModelsServiceServer) {
	s.RegisterService(&_ModelsService_serviceDesc, srv)
}

func _ModelsService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListModelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelsServiceServer).List(m, &modelsServiceListServer{stream})
}

type ModelsService_ListServer interface {
	Send(*Model) error
	grpc.ServerStream
}

type modelsServiceListServer struct {
	grpc.ServerStream
}

func (x *modelsServiceListServer) Send(m *Model) error {
	return x.ServerStream.SendMsg(m)
}

func _ModelsService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelsService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).Find(ctx, req.(*FindModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).Create(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).Delete(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_ListVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVersionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelsServiceServer).ListVersions(m, &modelsServiceListVersionsServer{stream})
}

type ModelsService_ListVersionsServer interface {
	Send(*ModelVersion) error
	grpc.ServerStream
}

type modelsServiceListVersionsServer struct {
	grpc.ServerStream
}

func (x *modelsServiceListVersionsServer) Send(m *ModelVersion) error {
	return x.ServerStream.SendMsg(m)
}

func _ModelsService_FindVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).FindVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelsService/FindVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).FindVersion(ctx, req.(*FindVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_SetPrimaryVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPrimaryVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).SetPrimaryVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelsService/SetPrimaryVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).SetPrimaryVersion(ctx, req.(*SetPrimaryVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_CreateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).CreateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelsService/CreateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).CreateVersion(ctx, req.(*CreateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ModelsService/DeleteVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).DeleteVersion(ctx, req.(*DeleteVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serving.ModelsService",
	HandlerType: (*ModelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _ModelsService_Find_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ModelsService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ModelsService_Delete_Handler,
		},
		{
			MethodName: "FindVersion",
			Handler:    _ModelsService_FindVersion_Handler,
		},
		{
			MethodName: "SetPrimaryVersion",
			Handler:    _ModelsService_SetPrimaryVersion_Handler,
		},
		{
			MethodName: "CreateVersion",
			Handler:    _ModelsService_CreateVersion_Handler,
		},
		{
			MethodName: "DeleteVersion",
			Handler:    _ModelsService_DeleteVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ModelsService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListVersions",
			Handler:       _ModelsService_ListVersions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/models.proto",
}

func init() { proto.RegisterFile("protos/models.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x5d, 0x73, 0xd2, 0x40,
	0x14, 0x35, 0x34, 0xd0, 0xe4, 0xda, 0x52, 0xb8, 0xa0, 0x13, 0xa9, 0xcc, 0x60, 0xc6, 0x0f, 0xf4,
	0x01, 0x6b, 0xd5, 0x47, 0x9d, 0x61, 0x14, 0x66, 0x9c, 0x81, 0xb6, 0x13, 0xaa, 0x3e, 0x32, 0x91,
	0xac, 0x9a, 0x99, 0x92, 0xc4, 0xdd, 0xc5, 0x0e, 0x8f, 0xfa, 0x27, 0xfb, 0x77, 0x9c, 0xec, 0x2e,
	0x21, 0x1f, 0x05, 0xeb, 0xa3, 0x6f, 0xc9, 0x39, 0xf7, 0xde, 0x3d, 0x7b, 0xee, 0x21, 0x40, 0x23,
	0xa2, 0x21, 0x0f, 0xd9, 0xf3, 0x79, 0xe8, 0x91, 0x0b, 0xd6, 0x13, 0x6f, 0xb8, 0xcb, 0x08, 0xfd,
	0xe9, 0x07, 0xdf, 0x5a, 0x75, 0xc5, 0xce, 0x42, 0x4a, 0x24, 0x67, 0xff, 0xd2, 0xa0, 0x3c, 0x8e,
	0x8b, 0xb1, 0x06, 0x3b, 0x0b, 0xdf, 0xb3, 0xb4, 0x8e, 0xd6, 0x35, 0x9d, 0xf8, 0x11, 0x11, 0xf4,
	0xc0, 0x9d, 0x13, 0xab, 0x24, 0x20, 0xf1, 0x8c, 0x4d, 0x28, 0x87, 0x97, 0x01, 0xa1, 0xd6, 0x8e,
	0x00, 0xe5, 0x0b, 0xb6, 0x01, 0x66, 0x94, 0xb8, 0x9c, 0x78, 0x53, 0x97, 0x5b, 0x7a, 0x47, 0xeb,
	0x96, 0x1d, 0x53, 0x21, 0x7d, 0x1e, 0xd3, 0x8b, 0xc8, 0x5b, 0xd1, 0x65, 0x49, 0x2b, 0xa4, 0xcf,
	0xed, 0xdf, 0x25, 0xd8, 0x13, 0x1a, 0x3e, 0x11, 0xca, 0xfc, 0x30, 0xb8, 0xa1, 0x94, 0x36, 0x80,
	0xcf, 0xa6, 0x11, 0xf5, 0xe7, 0x2e, 0x5d, 0x0a, 0x3d, 0x86, 0x63, 0xfa, 0xec, 0x4c, 0x02, 0x78,
	0x08, 0xa6, 0xcf, 0xa6, 0xec, 0xbb, 0xeb, 0x85, 0x97, 0x42, 0x92, 0xe1, 0x18, 0x3e, 0x9b, 0x88,
	0x77, 0x7c, 0x0a, 0x35, 0x4a, 0x7e, 0x2c, 0x08, 0xe3, 0xd3, 0xaf, 0xc4, 0xe5, 0x0b, 0x4a, 0x98,
	0x55, 0xee, 0xec, 0x74, 0x4d, 0xe7, 0x40, 0xe1, 0x43, 0x05, 0xe3, 0x13, 0x38, 0x60, 0x3c, 0xa4,
	0xc4, 0x5b, 0x57, 0x56, 0x44, 0x65, 0x55, 0xc2, 0x49, 0x61, 0xd6, 0x84, 0xdd, 0xed, 0x26, 0x18,
	0x79, 0x13, 0x1a, 0x50, 0x1f, 0xf9, 0x8c, 0x0b, 0x1f, 0x98, 0x23, 0x35, 0xd8, 0x0f, 0xa1, 0x36,
	0xf4, 0x03, 0x4f, 0x80, 0x0a, 0x2b, 0x9a, 0x63, 0xbf, 0x05, 0x7c, 0x27, 0x8e, 0xc9, 0xd4, 0xad,
	0x2c, 0xd3, 0xae, 0xdb, 0x5e, 0x29, 0xb5, 0x3d, 0xfb, 0x31, 0xe0, 0x7b, 0x72, 0x41, 0x72, 0xfd,
	0xc5, 0x73, 0x8e, 0xa1, 0x11, 0x4b, 0x54, 0x5b, 0x5a, 0x89, 0x8c, 0x8d, 0x16, 0x71, 0x9b, 0xae,
	0xcb, 0x0d, 0x01, 0x7c, 0xf4, 0xbd, 0x78, 0x76, 0x7c, 0x03, 0xd5, 0xb3, 0x79, 0xf6, 0x07, 0xb0,
	0x26, 0x84, 0xab, 0xdd, 0xe5, 0xaa, 0xb7, 0x1d, 0xb0, 0x1a, 0x55, 0x5a, 0x8f, 0xba, 0xd2, 0xa0,
	0x29, 0xfd, 0xf8, 0x97, 0x39, 0xff, 0x41, 0xc2, 0xec, 0x2e, 0x34, 0xe5, 0xa2, 0xfe, 0x66, 0xe7,
	0xb3, 0x47, 0x60, 0x8a, 0x65, 0x9e, 0x2f, 0x23, 0x82, 0x06, 0xe8, 0x67, 0xe3, 0xf1, 0xa8, 0x76,
	0x0b, 0xab, 0x00, 0xe7, 0x83, 0x93, 0xc9, 0xa9, 0x33, 0x1c, 0x9d, 0x7e, 0xae, 0x69, 0xc7, 0x57,
	0x3a, 0xec, 0xcb, 0xc4, 0x4d, 0xe2, 0x4f, 0xc4, 0x8c, 0xe0, 0x2b, 0xd0, 0xe3, 0x1d, 0x63, 0xab,
	0xa7, 0x3e, 0x1a, 0xbd, 0x42, 0x2a, 0x5b, 0xd5, 0x84, 0x13, 0xf8, 0x91, 0x86, 0x2f, 0x40, 0x8f,
	0xb7, 0x8c, 0xf7, 0x12, 0x26, 0x1f, 0xdb, 0x7c, 0x13, 0xbe, 0x86, 0x8a, 0x5c, 0x12, 0x1e, 0x26,
	0x4c, 0x31, 0xc5, 0x85, 0xb6, 0x37, 0x50, 0x91, 0x16, 0xa4, 0xda, 0x8a, 0xe1, 0x6d, 0xdd, 0x4d,
	0xc8, 0xc1, 0x3c, 0xe2, 0x4b, 0x87, 0xb0, 0x28, 0x0c, 0x18, 0xc1, 0x01, 0xec, 0xa5, 0x23, 0x8c,
	0xf7, 0x33, 0xd7, 0xcc, 0x25, 0xbb, 0x75, 0x27, 0x7b, 0xb8, 0xa2, 0x8f, 0x34, 0xec, 0xc3, 0xed,
	0x54, 0xaa, 0x53, 0x52, 0x8a, 0x59, 0xdf, 0x30, 0x04, 0x4f, 0xa0, 0x5e, 0x08, 0x3c, 0x3e, 0x48,
	0x6a, 0x37, 0xfd, 0x18, 0xb6, 0xdc, 0x6c, 0x3f, 0x13, 0x7a, 0x6c, 0xe7, 0x6c, 0xbd, 0x99, 0xac,
	0x21, 0xec, 0x67, 0x22, 0x96, 0x1a, 0x73, 0x5d, 0xf4, 0x36, 0xc9, 0xf9, 0x52, 0x11, 0x7f, 0x2f,
	0x2f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xf8, 0x8a, 0x00, 0x91, 0x06, 0x00, 0x00,
}
